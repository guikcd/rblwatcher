#!/usr/bin/python
# -*- coding: utf-8 -*-
# rblwatcher - Watch if smtp server(s) or URIs are listed in blacklists.
#            Quiet by default to use with cron
#            Require dns python module (ex.: python-dns on Debian like)
# TODO: functions must return something !
#
# Copyright (C) 2011  Guillaume Delacour <gui@iroqwa.org>
# based on http://www.fiction.net/blong/programs/python/rbl.py
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import sys, socket, string
try:
    import DNS
except ImportError:
    print "Error importing DNS, is pydns installed ? (python-dns on Debian)"
    sys.exit(1)

# list of RBL to use
rbl_list = [ "bl.spamcop.net", \
             "zen.spamhaus.org", \
             "b.barracudacentral.org", \
             "ips.backscatterer.org", \
             "combined.njabl.org", \
             "psbl.surriel.com", \
             "dnsbl.sorbs.net", \
             "combined.rbl.msrbl.net", \
             "dnsbl-1.uceprotect.net", \
             "bl.spamcannibal.org" ]

uribl_list = [ "multi.uribl.com",
               "multi.surbl.org" ]

version = "0.3"

# testrecords
# record that souldn't be found
rbl_testrecord_notfound = "127.0.0.1"
# record that sould be found
rbl_testrecord_found = "127.0.0.2"
# http://www.uribl.com/about.shtml
uribl_testrecord_found = "test.uribl.com"
# http://www.surbl.org/guidelines
surbl_testrecord_found = "test.surbl.org"

# escalation netbloc lists: dnsbl-2.uceprotect.net, \
#dnsbl-3.uceprotect.net, spam.dnsbl.sorbs.net

def check_rbl_domain (domains, do_log=False):
    """Discover all MX servers of a domain and check the status in RBL"""
    for domain in domains:
        # MX lookup to get all smtp server
        DNS.DiscoverNameServers()
        mx_hosts = DNS.mxlookup(domain)
        if mx_hosts:
            for mx in mx_hosts:
                # mx is a tuple that contain the priority and the server
                # we want a list
                mx_list = list(mx)
                # Don't care the priority of the MX
                del mx_list[0]
                # test the server
                check_rbl_host(mx_list, do_log=do_log)
        else:
            print "No MX found for %s domain" % domain

def check_rbl_host (hosts, do_log=False, testmode=False):
    """Test if a host is listed on a RBL list"""
    for host in hosts:
        try:
            # try to resolve ip if fqdn given
            if do_log:
                print "Trying to resolve %s" % host
            ipaddress = socket.gethostbyname(host)
            if ipaddress != host:
                if do_log:
                    print "Host %s resolves to %s" % (host, ipaddress)
            # host is an ipaddress
            else:
                if do_log:
                    print "Reverse(s) of %s: %s" % \
                        (host, socket.gethostbyaddr(host))

            addr_parts = string.split(ipaddress, '.')
            addr_parts.reverse()
            for rbl in rbl_list:
                check_name = "%s.%s" % (string.join(addr_parts, '.'), rbl)
                # try to resolve reverse + list
                # (ex: 117.38.23.94.bl.spamcop.net)
                # return 127.0.0.x if listed, depending on the list
                try:
                    check_addr = socket.gethostbyname(check_name)
                # if it returns nothing, it's ok
                except socket.error:
                    check_addr = None
                    if do_log or testmode:
                        print "No returns for %s on %s (%s)" % \
                            (check_name, rbl, check_addr)
                if check_addr != None:
                    print "%s seems to be listed in %s (%s -> %s)" % \
                            (ipaddress, rbl, check_name, check_addr)
        except socket.error:
            print "Name or service not known"

def check_uribl (uris, do_log=False):
    """Test if uris are listed on URI DNSBLs"""
    for uri in uris:
        for uri_bl in uribl_list:
            # ex.: domain.tld.multi.uribl.com
            check_name = "%s.%s" % (uri, uri_bl)
            # return 127.0.0.x if listed, depending on the list
            try:
                check_addr = socket.gethostbyname(check_name)
            # if it returns nothing, it's ok
            except socket.error, (err, errstr):
                check_addr = None
                if do_log:
                    print "No returns for %s on %s ([%s] %s)" % \
                        (check_name, uri_bl, err, errstr)
            if check_addr != None:
                print "%s seems to be listed in %s (%s -> %s)" % \
                        (uri, uri_bl, check_name, check_addr)

def callback(option, opt_str, value, parser):
    """Callback to have multiple args in list"""
    setattr(parser.values, option.dest, value.split(','))

if __name__ == "__main__":
    USAGE = "Usage: %prog [options] arg1 arg2"
    VERSION_PRINT = "%prog " + version
    DESCRIPTION = "Check if smtp servers or URIs are in blacklists"
    parser = OptionParser(USAGE, description=DESCRIPTION, version=VERSION_PRINT)

    parser.add_option("-v", "--verbose",
              action="store_true",
              help="Verbose output")

    parser.add_option("-c", "--check",
              action="store_true",
              dest="check",
              help="Check testrecords on configured RBL and URI DNSBL and exit (implies verbose mode)")

    parser.add_option("-d", "--domains",
              type="string",
              action="callback",
              callback=callback,
              dest="domains",
              help="Comma separated list of dns domain name to test (ex.: example.org")

    parser.add_option("-s", "--servers",
              type="string",
              action="callback",
              callback=callback,
              dest="servers",
              help="Comma separated list of FQDN or ip address to test (ex.: host.domain.tld or 127.0.0.1")

    parser.add_option("-u", "--uris",
              type="string",
              action="callback",
              callback=callback,
              dest="uris",
              help="Comma separated list of URIs to test (ex.: domain.tld")

    (options, args) = parser.parse_args()

    # if no args, print the USAGE
    if not options.domains and not options.servers and not options.check and not options.uris:
        parser.print_help()

    if options.check:
        print "In test mode, two lookup tests are made:"
        print " - %s should    be found on RBLs" % rbl_testrecord_found
        print " - %s shouldn't be found on RBLs" % rbl_testrecord_notfound
        check_rbl_host([ rbl_testrecord_found, rbl_testrecord_notfound ],
                                           do_log=options.verbose,
                                           testmode=True)
        check_uribl([ uribl_testrecord_found, surbl_testrecord_found ],
                                           do_log=options.verbose)

    if options.domains:
        check_rbl_domain(options.domains, do_log=options.verbose)

    if options.servers:
        check_rbl_host(options.servers, do_log=options.verbose)

    if options.uris:
        check_uribl(options.uris, do_log=options.verbose)
