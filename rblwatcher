#!/usr/bin/python
# -*- coding: utf-8 -*-
# rblwatch - Watch if smtp server(s) is/are listed in a RBL
# 	     Quiet by default to cron use
#	     Require dns python module (ex.: python-dns on Debian like)
#
# Copyright (C) 2010  Guillaume Delacour <gui@iroqwa.org>
# based on http://www.fiction.net/blong/programs/python/rbl.py
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser, Option
# hack to callback to take metavar value
Option.ALWAYS_TYPED_ACTIONS += ('callback',)
import sys, os, getopt, socket, string, re
try:
	import DNS
except ImportError:
	print "Error importing DNS, is python-dns installed ?"
	sys.exit(1)

# list of RBL to use
rbl_list = [ "bl.spamcop.net", "zen.spamhaus.org", "b.barracudacentral.org", \
	"ips.backscatterer.org", "combined.njabl.org", "psbl.surriel.com", \
	"dnsbl.sorbs.net", "combined.rbl.msrbl.net", \
	"dnsbl-1.uceprotect.net", "bl.spamcannibal.org" ]

# escalation netbloc lists: dnsbl-2.uceprotect.net, dnsbl-3.uceprotect.net, spam.dnsbl.sorbs.net

def test_rbl_list (testrecord="127.0.0.2", do_log=False):
	"""test if 2.0.0.127.rbl.list record exist on RBL"""
	"""this avoid mistaken RBL definition"""
	"""(as the check is ok if no 127.0.0.2 record is returned, we're not sure"""
	"""rbl is correct or not)"""
	if do_log: print "Testing RBL lists"
	for rbl in rbl_list:
		try:
			addr_parts = string.split(testrecord, '.')
			addr_parts.reverse()
			check_name = "%s.%s" % (string.join(addr_parts, '.'), rbl)
			check_addr = socket.gethostbyname(check_name)
			if do_log: print "OK: %s returns %s for %s" % (rbl, check_addr, check_name)
		except socket.error:
			print "Warning: lookup %s failed on %s rbl." % (check_name, rbl)

def check_rbl_domain (domains, do_log=False):
	"""discover all mx of a domain and check rbl status"""
	"""to easily check if smtp changes over the time"""
	for domain in domains:
		# MX lookup to get all smtp server
		DNS.DiscoverNameServers()
		mx_hosts = DNS.mxlookup(domain)
		for mx in mx_hosts:
			addr = socket.gethostbyname(mx[1])
			if do_log: print "Host %s resolves to %s" % (mx[1], addr)
			# generate IPv4 reverse
			addr_parts = string.split(addr, '.')
			addr_parts.reverse()
			for rbl in rbl_list:
				check_name = "%s.%s" % (string.join(addr_parts, '.'), rbl)
				# try to resolv the reverse + list(ex: 117.38.23.94.bl.spamcop.net)
				# return 127.0.0.x, depending on the list
				try: check_addr = socket.gethostbyname(check_name)
				# if it returns nothing, it's ok
				except socket.error:
					check_addr = None
					if do_log:
						print "No returns for %s on %s (%s)" % (check_name, rbl, check_addr)
				if check_addr != None:
					print "%s [%s] seems to be listed in %s (%s -> %s)" % (mx[1], addr, rbl, check_name, check_addr)

def check_rbl_host (hosts, do_log=False):
	"""test if a host address is listed on a RBL list"""
	for host in hosts:
		try:
			# try to resolve ip if fqdn given
			if do_log: print "Trying to resolve %s" % host
			ipaddress = socket.gethostbyname(host)
			if ipaddress != host:
				if do_log: print "Host %s resolves to %s" % (host, ipaddress)

			addr_parts = string.split(ipaddress, '.')
			addr_parts.reverse()
			for rbl in rbl_list:
				check_name = "%s.%s" % (string.join(addr_parts, '.'), rbl)
				# try to resolve the reverse + list(ex: 117.38.23.94.bl.spamcop.net)
				# return 127.0.0.x, depending on the list
				try: check_addr = socket.gethostbyname(check_name)
				# if it returns nothing, it's ok
				except socket.error:
					check_addr = None
					if do_log:
						print "No returns for %s on %s (%s)" % (check_name, rbl, check_addr)
				if check_addr != None:
					print "%s seems to be listed in %s (%s -> %s)" % (ipaddress, rbl, check_name, check_addr)
		except socket.error: print "Name or service not known"
	
def cb(option, opt_str, value, parser):
	"""Callback to have multiple args in list"""
	args=[]
	for arg in parser.rargs:
		if arg[0] != "-":
			args.append(arg)
		else:
			del parser.rargs[:len(args)]
			break
	if getattr(parser.values, option.dest):
		args.extend(getattr(parser.values, option.dest))
	setattr(parser.values, option.dest, args)

def main():

	usage = "Usage: %prog [options] arg1 arg2"
	description = "Check if smtp servers are in RBL lists"
	parser = OptionParser(usage, description=description)

	parser.add_option("-v", "--verbose",
			  action="store_true",
			  help="Verbose output")

	parser.add_option("-c", "--check-rbl",
			  action="store_true",
			  dest="check",
			  help="Check (test 127.0.0.2) configured RBL only and exit")

	parser.add_option("-d", "--domains",
			  action="callback",
			  callback=cb,
			  metavar="domain1 [domain2 ...]",
			  dest="domains",
			  help="Test ip address of MX(s) on specified domain(s)")

	parser.add_option("-s", "--servers",
			  action="callback",
			  callback=cb,
			  metavar="server1 [server2 ...]",
			  dest="servers",
			  help="Server(s) address to test (FQDN or ip address)")

	(options, args) = parser.parse_args()

	if len(args) == 0:
		parser.error("Please give arguments; -h, --help for details")

	if options.check:
		test_rbl_list(do_log=options.verbose)

	if options.domains:
		check_rbl_domain(options.domains,do_log=options.verbose)

	if options.servers:
		check_rbl_host(options.servers,do_log=options.verbose)
		
if __name__ == "__main__":
	main ()

# dns lookup
#	DNS.DiscoverNameServers()
#	request= DNS.DnsRequest(name='www.iroqwa.org', qtype='A')
#	try:	
#		result = request.req()
#		print result.answers
#	except DNS.Error:
#		print "error"

